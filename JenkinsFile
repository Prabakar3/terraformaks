pipeline{
    agent any
    tools{
        maven 'm1'
    }
    stages{
        stage('test'){
            steps{
                sh 'mvn clean test'
            }
        }
        stage('install'){
            steps{
                sh 'mvn clean install -D skipTests=true'
            }
        }
        stage("sonarqube build"){
            steps{
               mvn sonar:sonar -Dsonar.login=squ_4f2b9ca1a9beaf6e1d34ef25b6f70c293c4239dd
               withCredentials([string(credentialsId: 'Ram', variable: 'SONAR_TOKEN')]) {
               sh "mvn sonar:sonar -Dsonar.login=${SONAR_TOKEN}"
               }
            }
        }
        stage("jfrog"){
            steps{
                rtUpload(
                    serverId: 'ram-jfrog',
                    spec: '''{
                        "files": [
                            {
                                "pattern": "**/**/*.*ar",
                                "target": "ram-jfrog/"
                            }
                        ]
                    }'''
                )
            }
        }
        stage('dockerbuild'){
            steps{
                dir("backend"){
                    sh 'docker build -t raamriot/backend:latest .'
                }
                dir("frontend"){
                    sh 'docker build -t raamriot/frontend:latest .'
                }
            }
        }
        stage('docker push'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'Fflkjomoqsq74', usernameVariable: 'user')]) {
                    sh 'docker login -u raamriot -p Fflkjomoqsq74'
                    sh 'docker push raamriot/backend:latest'
                    sh 'docker push raamriot/frontend:latest'
                }
            }
        }
    }   
}
